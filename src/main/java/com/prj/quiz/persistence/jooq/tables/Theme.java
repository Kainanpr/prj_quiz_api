/*
 * This file is generated by jOOQ.
 */
package com.prj.quiz.persistence.jooq.tables;


import com.prj.quiz.persistence.jooq.DefaultSchema;
import com.prj.quiz.persistence.jooq.Indexes;
import com.prj.quiz.persistence.jooq.tables.records.ThemeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Theme extends TableImpl<ThemeRecord> {

    private static final long serialVersionUID = -400766561;

    /**
     * The reference instance of <code>theme</code>
     */
    public static final Theme THEME = new Theme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThemeRecord> getRecordType() {
        return ThemeRecord.class;
    }

    /**
     * The column <code>theme.id</code>.
     */
    public final TableField<ThemeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>theme.name</code>.
     */
    public final TableField<ThemeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>theme</code> table reference
     */
    public Theme() {
        this(DSL.name("theme"), null);
    }

    /**
     * Create an aliased <code>theme</code> table reference
     */
    public Theme(String alias) {
        this(DSL.name(alias), THEME);
    }

    /**
     * Create an aliased <code>theme</code> table reference
     */
    public Theme(Name alias) {
        this(alias, THEME);
    }

    private Theme(Name alias, Table<ThemeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Theme(Name alias, Table<ThemeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.THEME_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ThemeRecord, Integer> getIdentity() {
        return Internal.createIdentity(com.prj.quiz.persistence.jooq.tables.Theme.THEME, com.prj.quiz.persistence.jooq.tables.Theme.THEME.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ThemeRecord> getPrimaryKey() {
        return Internal.createUniqueKey(com.prj.quiz.persistence.jooq.tables.Theme.THEME, "KEY_theme_PRIMARY", com.prj.quiz.persistence.jooq.tables.Theme.THEME.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ThemeRecord>> getKeys() {
        return Arrays.<UniqueKey<ThemeRecord>>asList(
              Internal.createUniqueKey(com.prj.quiz.persistence.jooq.tables.Theme.THEME, "KEY_theme_PRIMARY", com.prj.quiz.persistence.jooq.tables.Theme.THEME.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Theme as(String alias) {
        return new Theme(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Theme as(Name alias) {
        return new Theme(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Theme rename(String name) {
        return new Theme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Theme rename(Name name) {
        return new Theme(name, null);
    }
}
